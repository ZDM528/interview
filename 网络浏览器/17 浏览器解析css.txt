解析：一旦 CSS 被浏览器下载，CSS 解析器就会被打开来处理它遇到的任何 CSS。
     这可以是单个文档内的 CSS、<style>标记内的 CSS，也可以是 DOM 元素的style属性内嵌的 CSS。
     所有CSS都根据语法规范进行解析和标记。解析完成后，就会生成有一个包含所有选择器、属性和属性各自值的数据结构
计算：既然我们已经解析了现有内容中的所有样式，接着就是对它们进行样式计算了。
     我们尝试尽量对所有值减少到一个标准化的计算值。当离开计算阶段时，
     任何维度值都被缩减为三个可能的输出之一:auto、百分比或像素值。
     为了清晰起见，让我们看几个例子，看 web 开发人员写了什么，以及计算后的结果
级联：由于 CSS 来源有多种，所以浏览器需要一种方法来确定哪些样式应该应用于给定的元素，
     浏览器使用一个名为 特殊性(specificity) 的公式，它计算选择器中使用的标记、类、id 和属性选择器的数值，以及 !important声明的数值。
     通过内联 style 属性在元素上定义的样式被赋予一个等级，该等级优先于 <style> 块或外部样式表中的任何样式。
     如果 Web 开发人员使用 !important 某个值，则该值将胜过任何 CSS，无论其位置如何，除非还有 !important 内联。
     同一级别的个数，数量多的优先级高，假设同样即比较下一级别的个数。至于各级别的优先级例如以下：
     !important > 内联 > ID > 类 > 标签 | 伪类 | 属性选择 > 伪对象 > 通配符 > 继承
做级联：当浏览器拥有一个完整的数据结构，包含来自所有源的所有声明时，它将按照规范对它们进行排序。
       首先，它将按来源排序，然后按特性(specificity)排序，最后按文档顺序排序
解析auto,处理浮动
了解片段：关于布局如何工作的最后一个方面是碎片化
绘画：我们取出所有的 CSS 内容，对其进行解析，将其级联到 DOM 树中，并完成布局。
     但是我们还没有对布图应用颜色、边框、阴影和类似的设计处理——处理这些过程被称为绘画。