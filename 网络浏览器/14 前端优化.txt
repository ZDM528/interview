第一个可以从网页渲染过程进行优化：
当网页渲染时首先解析Html,构建dom树，同时解析css，结合dom树一起渲染
当遇到Js文件时，会阻塞dom树的解析，下载js脚本
要把css放在顶部，js放在底部，并且删除冗余的文件,可以利用 GZIP 压缩文件，js 利用defer async 属,不会阻塞dom树的渲染，
浏览器在渲染时会引起重排和重绘，尽量避免重排重绘,少使用table布局，利用文档碎片fragment,一次性更改style样式，对于复杂动画或者一直需要改变元素的排列的元素使用absolute或fixed，脱离文本流

第二个可以从渲染后的页面交互入手
防抖节流，减少不必要的http请求
使用好的缓存策略（强缓存，协商缓存）
CDN
图片缓加载
事件委托，减少事件注册
webpack  url-loader/file-loader 将一些图片转换为base64，减少http请求 ，gzip压缩，代码分离 
框架优化vue:v-if v-show key  路由懒加载
