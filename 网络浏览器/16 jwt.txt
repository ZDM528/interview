jwt：用于客户端与服务端传送数据的身份认证
1.基于传统的token认证
用户登录，服务端给返回,token并将token保存在服务端
以后用户再来访问，需要携带token,服务端获取token后，再去数据库获取token进行验证
2.基于session的认证
http协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证
那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发出的请求
所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，
告诉其保存为cookie,以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了,这就是传统的基于session认证。
3.jwt
用户登录，服务端给用户返回一个token(服务端不存在)
以后用户再来访问，需要携带token ,服务端获取token后，再做token的校验





优势：相较于传统的token认证，它无需在服务端保存token
     无状态
     有效避免了CSRF 攻击
     适合移动端应用
     支持跨域访问: Cookie是不允许垮域访问的，token支持
jwt实现过程：
用户提交姓名和密码登录成功，服务端使用jwt生成一个token,并给用户返回 
jwt生成的token由三段构成
第一段 Header,内部包含算法/token 类型，json 转化为字符串，然后做base64url加密
第二段 payload ,自定义值，json 转化为字符串，然后做base64url加密
第三段：第一步：将第一二段的密文拼接起来
       第二步：对前2部分密文进行HS256加密+加盐
       第三步：对HS256加密后的密文再做base64url加密

以后用户再来访问时，需要携带token,后端对token进行校验
获取token
第一步：对token进行切割
第二步：对第二段进行base64Url解密，并获取token,检测token是否超时
第三步：把第一二段拼接，再次加密
