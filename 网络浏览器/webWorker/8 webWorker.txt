js是单线程，所有任务只能在一个线程上执行，webworker使得一个web应用程序可以在于主线程分离的后台线程上运行一个脚本操作
Web Worker 的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。
而且Worker 线程一旦新建成功，就会始终运行，不会被主线程上的活动（比如用户点击按钮、提交表单）打断。这样有利于随时响应主线程的通信。
但是，这也造成了 Worker 比较耗费资源，不应该过度使用，而且一旦使用完毕，就应该注意及时关闭。

1、限制
　　worker线程的使用有一些注意点：

（1）同源限制：分配给 Worker 线程运行的脚本文件，必须与主线程的脚本文件同源。

（2）文件限制：为了安全，Worker 线程无法读取本地文件，即不能打开本机的文件系统（file://），它所加载的脚本必须来自网络，且需要与主线程的脚本同源。

（3）DOM操作限制：worker线程在与主线程的window不同的另一个全局上下文中运行，其中无法读取主线程所在网页的DOM对象，也不能获取 document、window等对象，但是可以获取navigator、location(只读)、XMLHttpRequest、setTimeout等浏览器API。

（4）通信限制：worker线程与主线程不在同一个上下文，不能直接通信，需要通过postMessage方法传递消息来通信。

（5）脚本限制：worker线程不能执行alert、confirm，但可以使用 XMLHttpRequest 对象发出ajax请求。